# Doctest for BaseGeometry class
# setup module and class
>>> mod = __import__("7-base_geometry")
>>> BaseGeometry = mod.BaseGeometry

# Check for mod and class doc string
>>> len(mod.__doc__) > 1
True
>>> len(BaseGeometry.__doc__) > 1
True

# Test Cases

# Test 1: Test error raised by the `area` method
>>> test_1 = BaseGeometry()
>>> test_1.area()
Traceback (most recent call last):
    ...
Exception: area() is not implemented

# Test 2: Test error raised by calling `integer_validator` method
# without argument given
>>> test_2 = BaseGeometry()
>>> test_2.integer_validator()
Traceback (most recent call last):
    ...
TypeError: BaseGeometry.integer_validator() missing 2 required positional arguments: 'name' and 'value'

# Test 3: Test error raised by calling `interger_validator` method
# when value is equal to 0
>>> test_3 = BaseGeometry()
>>> test_3.integer_validator("valid", 0)
Traceback (most recent call last):
    ...
ValueError: valid must be greater than 0

# Test 4: Test error raised by calling `interger_validator` method
# when value is less than 0
>>> test_4 = BaseGeometry()
>>> test_4.integer_validator("valid", -3)
Traceback (most recent call last):
    ...
ValueError: valid must be greater than 0

# Test 5: Test error raised by calling `interger_validator` method
# when `value` argument is not an integer_validator
>>> test_5 = BaseGeometry()
>>> test_5.integer_validator("valid", "7")
Traceback (most recent call last):
    ...
TypeError: valid must be an integer
