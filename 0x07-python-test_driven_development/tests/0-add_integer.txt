# Set up doctest
>>> add_integer = __import__("0-add_integer").add_integer

# Test Cases

# Test 1.0: Check for invalid argument data types
# Test 1.1: Check argument type for `a`
>>> print(add_integer("1"))
Traceback (most recent call last):
    ...
TypeError: a must be an integer
>>> print(add_integer(None))
Traceback (most recent call last):
    ...
TypeError: a must be an integer
>>> print(add_integer(True))
Traceback (most recent call last):
    ...
TypeError: a must be an integer
>>> print(add_integer(1))
99

# Test 1.2: Check argument type for `b`
>>> print(add_integer(1, "2"))
Traceback (most recent call last):
    ...
TypeError: b must be an integer
>>> print(add_integer(1, None))
Traceback (most recent call last):
    ...
TypeError: b must be an integer
>>> print(add_integer(1, True))
Traceback (most recent call last):
    ...
TypeError: b must be an integer
>>> print(add_integer(0))
98

# Test 2: Check Return type and output
>>> if type(add_integer(0)) is int:
...     print(True)
True
>>> print(type(add_integer(1)) is int)
True
>>> print(type(add_integer(0.1, 9.7)) is int)
True
>>> print(add_integer(0.1, 9.7))
9

# Test 3: Common Errors
>>> add_integer(b=67)
Traceback (most recent call last):
    ...
TypeError: add_integer() missing 1 required positional argument: 'a'
>>> add_integer(float('inf'))
Traceback (most recent call last):
    ...
OverflowError: cannot convert float infinity to integer
>>> add_integer(1, -float('inf'))
Traceback (most recent call last):
    ...
OverflowError: cannot convert float infinity to integer